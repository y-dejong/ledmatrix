// Little endian bytes
uint8_t numeric5x7_min[10][5] = {
  { // digit 0
  0b00101110,
  0b11000110,
  0b00011000,
  0b10100011,
  0b00000011
  },
  { // digit 1
  0b11000100,
  0b00010100,
  0b01000010,
  0b11001000,
  0b00000111
  },
  { // digit 2
  0b00101110,
  0b01000010,
  0b00100110,
  0b11000010,
  0b00000111
  },
  { // digit 3
  0b00101110,
  0b01000010,
  0b00000110,
  0b10100011,
  0b00000011
  },
  { // digit 4
  0b10001000,
  0b10101001,
  0b11110100,
  0b00010001,
  0b00000010
  },
  { // digit 5
  0b00111111,
  0b10000100,
  0b00001111,
  0b10100011,
  0b00000011
  },
  { // digit 6
  0b00101110,
  0b10000110,
  0b00010111,
  0b10100011,
  0b00000011
  },
  { // digit 7
  0b00011111,
  0b00100010,
  0b01000010,
  0b00001000,
  0b00000001
  },
  { // digit 8
  0b00101110,
  0b01000110,
  0b00010111,
  0b10100011,
  0b00000011
  },
  { // digit 9
  0b00101110,
  0b01000110,
  0b00001111,
  0b10100011,
  0b00000011
  }
};

uint8_t alphanumeric4x6_min[36][3] {
  { // digit 0
  0b10010110,
  0b10011001,
  0b01101001
  },
  { // digit 1
  0b01100100,
  0b01000100,
  0b11100100
  },
  { // digit 2
  0b10010110,
  0b00100100,
  0b11110001
  },
  { // digit 3
  0b10010110,
  0b10000100,
  0b01101001
  },
  { // digit 4
  0b01100100,
  0b11110101,
  0b01000100
  },
  { // digit 5
  0b00011111,
  0b10000111,
  0b01101001
  },
  { // digit 6
  0b00011110,
  0b10010111,
  0b01101001
  },
  { // digit 7
  0b10001111,
  0b00100100,
  0b00100010
  },
  { // digit 8
  0b10010110,
  0b10010110,
  0b01101001
  },
  { // digit 9
  0b10010110,
  0b10001110,
  0b01101001
  },
  { // A
  0b10010110,
  0b10011111,
  0b10011001
  },
  { // B
  0b10010111,
  0b10010111,
  0b01111001
  },
  { // C
  0b10010110,
  0b00010001,
  0b01101001
  },
  { // D
  0b10010111,
  0b10011001,
  0b01111001
  },
  { // E
  0b00011111,
  0b00010111,
  0b11110001
  },
  { // F
  0b00011111,
  0b00010111,
  0b00010001
  },
  { // G
  0b10010110,
  0b11010001,
  0b01101001
  },
  { // H
  0b10011001,
  0b10011111,
  0b10011001
  },
  { // I
  0b01001110,
  0b01000100,
  0b11100100
  },
  { // J
  0b01001110,
  0b01000100,
  0b00100101
  },
  { // K
  0b01011001,
  0b01010011,
  0b10011001
  },
  { // L
  0b00010001,
  0b00010001,
  0b11110001
  },
  { // M
  0b11111001,
  0b10011001,
  0b10011001
  },
  { // N
  0b10111001,
  0b10011101,
  0b10011001
  },
  { // O
  0b10010110,
  0b10011001,
  0b01101001
  },
  { // P
  0b10010111,
  0b00010111,
  0b00010001
  },
  { // Q
  0b10010110,
  0b10011001,
  0b10000110
  },
  { // R
  0b10010111,
  0b10010111,
  0b10011001
  },
  { // S
  0b10010110,
  0b01000010,
  0b01101001
  },
  { // T
  0b01001110,
  0b01000100,
  0b01000100
  },
  { // U
  0b10011001,
  0b10011001,
  0b01101001
  },
  { // V
  0b10011001,
  0b10011001,
  0b01100110
  },
  { // W
  0b10011001,
  0b10011001,
  0b10011111
  },
  { // X
  0b00101001,
  0b10010100,
  0b10011001
  },
  { // Y
  0b10011001,
  0b01000110,
  0b00010010
  },
  { // Z
  0b10001111,
  0b00010110,
  0b11110001
  }
};

uint32_t color_gradient[] = {0xbf6c1f, 0xba6c22, 0xb56c26, 0xb16c29, 0xac6c2d, 0xa86c30, 0xa36c34, 0x9f6d37, 0x9a6d3b,
0x966d3e, 0x916d42, 0x8d6d45, 0x886d49, 0x846e4c, 0x7f6e50, 0x7b6e53, 0x766e57, 0x726e5a, 0x6d6e5e, 0x696f61, 0x646f65,
0x606f68, 0x5b6f6c, 0x576f6f, 0x526f73, 0x4e7076, 0x49707a, 0x45707d, 0x407081, 0x3c7084, 0x377088, 0x33718c,
0x31718d, 0x2f718e, 0x2e718f, 0x2c7191, 0x2b7192, 0x297193, 0x277194, 0x267196, 0x247197, 0x237198, 0x21719a,
0x1f719b, 0x1e719c, 0x1c719d, 0x1b719f, 0x1972a0, 0x1772a1, 0x1672a3, 0x1472a4, 0x1372a5, 0x1172a6, 0x0f72a8,
0x0e72a9, 0x0c72aa, 0x0b72ac, 0x0972ad, 0x0772ae, 0x0672af, 0x0472b1, 0x0372b2, 0x0172b3, 0x0073b5};

constexpr uint32_t getColor(const bool shouldPaint, const uint y) {
  return shouldPaint ? color_gradient[y] : 0;
}
